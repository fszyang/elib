
// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

{{/* -*- mode: Go -*- */}}

{{define "elog"}}{{if ne . "elog"}}elog.{{end}}{{end}}

package {{.Package}}

import (
{{if ne .Package "elog"}}
	"github.com/platinasystems/go/elib/elog"
{{end}}
)

var {{.Type}}Type = &{{template "elog" .Package}}EventType{
	Name: "{{.Package}}.{{.Type}}",
}

func init() {
	t := {{.Type}}Type
	t.Strings = stringer_{{.Type}}
	t.Encode = encode_{{.Type}}
	t.Decode = decode_{{.Type}}
	{{template "elog" .Package}}RegisterType({{.Type}}Type)
}

func stringer_{{.Type}}(c *{{template "elog" .Package}}Context, e *{{template "elog" .Package}}Event) []string {
	var x {{.Type}}
	x.Decode(c, e.Data[:])
	return x.Strings(c)
}

func encode_{{.Type}}(c *{{template "elog" .Package}}Context, e *{{template "elog" .Package}}Event, b []byte) int {
	var x {{.Type}}
	x.Decode(c, e.Data[:])
	return x.Encode(c, b)
}

func decode_{{.Type}}(c *{{template "elog" .Package}}Context, e *{{template "elog" .Package}}Event, b []byte) int {
	var x {{.Type}}
	x.Decode(c, b)
	return x.Encode(c, e.Data[:])
}

func (x {{.Type}}) log_{{.Type}}(b *{{template "elog" .Package}}Buffer, r {{template "elog" .Package}}Caller) {
	e := b.Add({{.Type}}Type, r)
	x.Encode(b.GetContext(), e.Data[:])
}

func (x {{.Type}}) Log() {
	r := {{template "elog" .Package}}GetCaller({{template "elog" .Package}}PointerToFirstArg(&x))
	x.log_{{.Type}}({{template "elog" .Package}}DefaultBuffer, r)
}

func (x {{.Type}}) Logc(r {{template "elog" .Package}}Caller) {
	x.log_{{.Type}}({{template "elog" .Package}}DefaultBuffer, r)
}

func (x {{.Type}}) Logb(b *{{template "elog" .Package}}Buffer) {
	r := {{template "elog" .Package}}GetCaller({{template "elog" .Package}}PointerToFirstArg(&x))
	x.log_{{.Type}}(b, r)
}

func (x {{.Type}}) Logbc(b *{{template "elog" .Package}}Buffer, r {{template "elog" .Package}}Caller) {
	x.log_{{.Type}}(b, r)
}
