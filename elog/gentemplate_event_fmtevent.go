// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elog -id fmtEvent -d Type=fmtEvent github.com/platinasystems/go/elib/elog/event.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package elog

import ()

var fmtEventType = &EventType{
	Name: "elog.fmtEvent",
}

func init() {
	t := fmtEventType
	t.Strings = stringer_fmtEvent
	t.Encode = encode_fmtEvent
	t.Decode = decode_fmtEvent
	RegisterType(fmtEventType)
}

func stringer_fmtEvent(c *Context, e *Event) []string {
	var x fmtEvent
	x.Decode(c, e.Data[:])
	return x.Strings(c)
}

func encode_fmtEvent(c *Context, e *Event, b []byte) int {
	var x fmtEvent
	x.Decode(c, e.Data[:])
	return x.Encode(c, b)
}

func decode_fmtEvent(c *Context, e *Event, b []byte) int {
	var x fmtEvent
	x.Decode(c, b)
	return x.Encode(c, e.Data[:])
}

func (x fmtEvent) log_fmtEvent(b *Buffer, r Caller) {
	e := b.Add(fmtEventType, r)
	x.Encode(b.GetContext(), e.Data[:])
}

func (x fmtEvent) Log() {
	r := GetCaller(PointerToFirstArg(&x))
	x.log_fmtEvent(DefaultBuffer, r)
}

func (x fmtEvent) Logc(r Caller) {
	x.log_fmtEvent(DefaultBuffer, r)
}

func (x fmtEvent) Logb(b *Buffer) {
	r := GetCaller(PointerToFirstArg(&x))
	x.log_fmtEvent(b, r)
}

func (x fmtEvent) Logbc(b *Buffer, r Caller) {
	x.log_fmtEvent(b, r)
}
