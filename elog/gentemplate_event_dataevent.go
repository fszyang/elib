// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elog -id dataEvent -d Type=dataEvent github.com/platinasystems/go/elib/elog/event.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package elog

import ()

var dataEventType = &EventType{
	Name: "elog.dataEvent",
}

func init() {
	t := dataEventType
	t.Strings = stringer_dataEvent
	t.Encode = encode_dataEvent
	t.Decode = decode_dataEvent
	RegisterType(dataEventType)
}

func stringer_dataEvent(c *Context, e *Event) []string {
	var x dataEvent
	x.Decode(c, e.Data[:])
	return x.Strings(c)
}

func encode_dataEvent(c *Context, e *Event, b []byte) int {
	var x dataEvent
	x.Decode(c, e.Data[:])
	return x.Encode(c, b)
}

func decode_dataEvent(c *Context, e *Event, b []byte) int {
	var x dataEvent
	x.Decode(c, b)
	return x.Encode(c, e.Data[:])
}

func (x dataEvent) log_dataEvent(b *Buffer, r Caller) {
	e := b.Add(dataEventType, r)
	x.Encode(b.GetContext(), e.Data[:])
}

func (x dataEvent) Log() {
	r := GetCaller(PointerToFirstArg(&x))
	x.log_dataEvent(DefaultBuffer, r)
}

func (x dataEvent) Logc(r Caller) {
	x.log_dataEvent(DefaultBuffer, r)
}

func (x dataEvent) Logb(b *Buffer) {
	r := GetCaller(PointerToFirstArg(&x))
	x.log_dataEvent(b, r)
}

func (x dataEvent) Logbc(b *Buffer, r Caller) {
	x.log_dataEvent(b, r)
}
