// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=loop -id callEvent -d Type=callEvent github.com/platinasystems/go/elib/elog/event.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package loop

import (
	"github.com/platinasystems/go/elib/elog"
)

var callEventType = &elog.EventType{
	Name: "loop.callEvent",
}

func init() {
	t := callEventType
	t.Strings = stringer_callEvent
	t.Encode = encode_callEvent
	t.Decode = decode_callEvent
	elog.RegisterType(callEventType)
}

func stringer_callEvent(c *elog.Context, e *elog.Event) []string {
	var x callEvent
	x.Decode(c, e.Data[:])
	return x.Strings(c)
}

func encode_callEvent(c *elog.Context, e *elog.Event, b []byte) int {
	var x callEvent
	x.Decode(c, e.Data[:])
	return x.Encode(c, b)
}

func decode_callEvent(c *elog.Context, e *elog.Event, b []byte) int {
	var x callEvent
	x.Decode(c, b)
	return x.Encode(c, e.Data[:])
}

func (x callEvent) log_callEvent(b *elog.Buffer, r elog.Caller) {
	e := b.Add(callEventType, r)
	x.Encode(b.GetContext(), e.Data[:])
}

func (x callEvent) Log() {
	r := elog.GetCaller(elog.PointerToFirstArg(&x))
	x.log_callEvent(elog.DefaultBuffer, r)
}

func (x callEvent) Logc(r elog.Caller) {
	x.log_callEvent(elog.DefaultBuffer, r)
}

func (x callEvent) Logb(b *elog.Buffer) {
	r := elog.GetCaller(elog.PointerToFirstArg(&x))
	x.log_callEvent(b, r)
}

func (x callEvent) Logbc(b *elog.Buffer, r elog.Caller) {
	x.log_callEvent(b, r)
}
