// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=elib -id BitmapVec -d VecType=BitmapsVec -d Type=[]BitmapVec vec.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package elib

type BitmapsVec [][]BitmapVec

func (p *BitmapsVec) Resize(n uint) {
	c := Index(cap(*p))
	l := Index(len(*p)) + Index(n)
	if l > c {
		c = NextResizeCap(l)
		q := make([][]BitmapVec, l, c)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:l]
}

func (p *BitmapsVec) validate(new_len uint, zero []BitmapVec) *[]BitmapVec {
	c := Index(cap(*p))
	lʹ := Index(len(*p))
	l := Index(new_len)
	if l <= c {
		// Need to reslice to larger length?
		if l > lʹ {
			*p = (*p)[:l]
			for i := lʹ; i < l; i++ {
				(*p)[i] = zero
			}
		}
		return &(*p)[l-1]
	}
	return p.validateSlowPath(zero, c, l, lʹ)
}

func (p *BitmapsVec) validateSlowPath(zero []BitmapVec, c, l, lʹ Index) *[]BitmapVec {
	if l > c {
		cNext := NextResizeCap(l)
		q := make([][]BitmapVec, cNext, cNext)
		copy(q, *p)
		for i := c; i < cNext; i++ {
			q[i] = zero
		}
		*p = q[:l]
	}
	if l > lʹ {
		*p = (*p)[:l]
	}
	return &(*p)[l-1]
}

func (p *BitmapsVec) Validate(i uint) *[]BitmapVec {
	var zero []BitmapVec
	return p.validate(i+1, zero)
}

func (p *BitmapsVec) ValidateInit(i uint, zero []BitmapVec) *[]BitmapVec {
	return p.validate(i+1, zero)
}

func (p *BitmapsVec) ValidateLen(l uint) (v *[]BitmapVec) {
	if l > 0 {
		var zero []BitmapVec
		v = p.validate(l, zero)
	}
	return
}

func (p *BitmapsVec) ValidateLenInit(l uint, zero []BitmapVec) (v *[]BitmapVec) {
	if l > 0 {
		v = p.validate(l, zero)
	}
	return
}

func (p *BitmapsVec) ResetLen() {
	if *p != nil {
		*p = (*p)[:0]
	}
}

func (p BitmapsVec) Len() uint { return uint(len(p)) }
